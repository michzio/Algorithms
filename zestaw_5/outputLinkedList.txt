

TESTOWY PROGRAM LinkedList<T>

Tworzenie listy...
push_front 5, 26, 33
--------------------------------------

front()
pierwszy element listy: 33
--------------------------------------

*(++itr)
drugi element (indirection operator): 26
--------------------------------------

list.element_at(++itr)
trzeci element listy to: 5
--------------------------------------

insert_after(before_begin(), 10)

{ 10, 33, 26, 5, }

--------------------------------------
inser_after(cbegin(), 20)

{ 10, 20, 33, 26, 5, }

--------------------------------------
3 x pop_front()

{ 26, 5, }

--------------------------------------
front()
pierwszy element listy: 26

{ 26, 5, }

--------------------------------------
empty()
Lista nie jest pusta
--------------------------------------
Tworzenie list2....
list2.push_front 11, 21, 31

{ 31, 21, 11, }

--------------------------------------
list.push_front 1, 2, 3

{ 3, 2, 1, 26, 5, }

--------------------------------------
list2.splice_after(before_begin(), list, list.begin(), itr)

{ 3, 1, 26, 5, }


{ 2, 31, 21, 11, }

--------------------------------------
list2.remove(21)

{ 2, 31, 11, }

--------------------------------------
list2.remove_if(single_digit)

{ 31, 11, }

--------------------------------------
list2.push_front 3,3,3,1

{ 1, 3, 3, 3, 31, 11, }

--------------------------------------
list2.unique()

{ 1, 3, 31, 11, }

--------------------------------------
list2.reverse()

{ 11, 31, 3, 1, }

--------------------------------------
list2.sort()

{ 1, 3, 11, 31, }

--------------------------------------
list.sort(std::greater<double>()) & list2.sort(std::greater<double>())

{ 26, 5, 3, 1, }


{ 31, 11, 3, 1, }

--------------------------------------
list.merge(list2, greater<double>())

{ 31, 26, 11, 5, 3, 3, 1, 1, }

--------------------------------------
